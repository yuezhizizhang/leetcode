## 1146. Snapshot Array
https://leetcode.com/problems/snapshot-array/

Implement a SnapshotArray that supports the following interface:

SnapshotArray(int length) initializes an array-like data structure with the given length.  Initially, each element equals 0.
void set(index, val) sets the element at the given index to be equal to val.
int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.
int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id

Example 1:
  Input: ["SnapshotArray","set","snap","set","get"]
  [[3],[0,5],[],[0,6],[0,0]]
  Output: [null,null,0,null,5]
Explanation: 
  SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3
  snapshotArr.set(0,5);  // Set array[0] = 5
  snapshotArr.snap();  // Take a snapshot, return snap_id = 0
  snapshotArr.set(0,6);
  snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5

Constraints:
* 1 <= length <= 50000
* At most 50000 calls will be made to set, snap, and get.
* 0 <= index < length
* 0 <= snap_id < (the total number of times we call snap())
* 0 <= val <= 10^9

```C#
public class SnapshotArray {

    private const int InitialValue = 0;
    private int Capacity { get; set; }
    private Dictionary<int, IList<int>> Snapshots { get; set; }
    private int SnapId { get; set; }

    public SnapshotArray(int length)
    {
        this.Capacity = length;
        this.Snapshots = new Dictionary<int, IList<int>>();
    }

    public void Set(int index, int val)
    {
        if (index < 0 || index >= Capacity) return;

        IList<int> list;
        int fill;
        if (this.Snapshots.ContainsKey(index))
        {
            list = this.Snapshots[index];
            fill = list.Last();
        }
        else
        {
            list = new List<int>();
            fill = InitialValue;
            this.Snapshots[index] = list;
        }

        var curr = list.Count;
        while (curr++ <= this.SnapId) list.Add(fill);

        list[this.SnapId] = val;
    }

    public int Snap()
    {
        this.SnapId++;
        return this.SnapId - 1;
    }

    public int Get(int index, int snap_id)
    {
        if (!this.Snapshots.ContainsKey(index)) return InitialValue;

        var history = this.Snapshots[index];
        if (history.Count <= snap_id) return history.Last();
        else return history[snap_id];
    }
}

/**
 * Your SnapshotArray object will be instantiated and called as such:
 * SnapshotArray obj = new SnapshotArray(length);
 * obj.Set(index,val);
 * int param_2 = obj.Snap();
 * int param_3 = obj.Get(index,snap_id);
 */
```

```JavaScript
/**
 * @param {number} length
 */
var SnapshotArray = function(length) {
    this.capacity = length;
    this.snapshots = new Map();
    this.snapId = 0;
};

/** 
 * @param {number} index 
 * @param {number} val
 * @return {void}
 */
SnapshotArray.prototype.set = function(index, val) {
    if (index < 0 || index >= this.capacity) return;

    let list, fill;
    if (this.snapshots.has(index)) {
        list = this.snapshots.get(index);
        fill = list[list.length - 1];
    } else {
        list = [];
        this.snapshots.set(index, list);
        fill = 0;
    }

    let curr = list.length;
    while (curr++ <= this.snapId) list.push(fill);

    list[list.length - 1] = val;
};

/**
 * @return {number}
 */
SnapshotArray.prototype.snap = function() {
    this.snapId++;
    return this.snapId - 1;
};

/** 
 * @param {number} index 
 * @param {number} snap_id
 * @return {number}
 */
SnapshotArray.prototype.get = function(index, snap_id) {
    if (!this.snapshots.has(index)) return 0;

    const list = this.snapshots.get(index);
    if (list.length <= snap_id) {
        return list[list.length - 1];
    } else {
        return list[snap_id];
    }
};


/** 
 * Your SnapshotArray object will be instantiated and called as such:
 * var obj = new SnapshotArray(length)
 * obj.set(index,val)
 * var param_2 = obj.snap()
 * var param_3 = obj.get(index,snap_id)
 */
```