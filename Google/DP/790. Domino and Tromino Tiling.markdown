790. Domino and Tromino Tiling
https://leetcode.com/problems/domino-and-tromino-tiling/

You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.

Given an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7.

In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.

Example 1:
Input: n = 3
Output: 5
Explanation: The five different ways are show above.

Example 2:
Input: n = 1
Output: 1

Constraints:
1 <= n <= 1000

** Solution **

https://www.youtube.com/watch?v=CecjOo4Zo-g&list=PLDV1Zeh2NRsAsbafOroUBnNV8fhZa7P4u&index=4


```C#
public class Solution {
    private const int MaxStates = 4;
    private const int Mod = 1000000007;

    public int NumTilings(int n)
    {
        var dp = new int[n][];
        for (var i = 0; i < n; i++)
        {
            dp[i] = new int[MaxStates];
        }

        return Tile(0, n, dp, true, true);
    }

    private int Tile(int column, int n, int[][] dp, bool slot1, bool slot2)
    {
        if (column == n) return 1;

        var state = GetState(slot1, slot2);
        if (dp[column][state] != 0) return dp[column][state];

        var slot3 = column + 1 < n;
        var slot4 = slot3;

        var count = 0;
        if (slot1 && slot2) count = Modulo(count + Tile(column + 1, n, dp, true, true));
        if (slot1 && slot2 && slot3) count = Modulo(count + Tile(column + 1, n, dp, false, true));
        if (slot1 && slot2 && slot4) count = Modulo(count + Tile(column + 1, n, dp, true, false));
        if (slot1 && slot2 && slot3 && slot4) count = Modulo(count + Tile(column + 1, n, dp, false, false));
        if (slot1 && !slot2 && slot3) count = Modulo(count + Tile(column + 1, n, dp, false, true));
        if (slot1 && !slot2 && slot3 && slot4) count = Modulo(count + Tile(column + 1, n, dp, false, false));
        if (!slot1 && slot2 && slot4) count = Modulo(count + Tile(column + 1, n, dp, true, false));
        if (!slot1 && slot2 && slot3 && slot4) count = Modulo(count + Tile(column + 1, n, dp, false, false));
        if (!slot1 && !slot2) count = Modulo(count + Tile(column + 1, n, dp, true, true));

        dp[column][state] = count;
        return dp[column][state];
    }

    private int GetState(bool slot1, bool slot2)
    {
        var state = 0;
        if (!slot1) state |= 1;
        if (!slot2) state |= 2;

        return state;
    }

    private int Modulo(int number)
    {
        return number % Mod;
    }
}
```

```JavaScript
/**
 * @param {number} n
 * @return {number}
 */
var numTilings = function(n) {
	const maxStates = 4;
	let dp = new Array(maxStates);
	for (let i = 0; i < dp.length; i++) {
		dp[i] = new Array(n);
	}
	
    return tile(0, n, dp, true, true);
};

var tile = function (column, n, dp, slot1, slot2) {
	if (column == n) return 1;

	const state = getState(slot1, slot2);
	if (dp[state][column] !== undefined) return dp[state][column];

	const slot3 = column + 1 < n;
	const slot4 = slot3;

	let count = 0;
	if (slot1 && slot2) count = modulo(count + tile(column + 1, n, dp, true, true));
	if (slot1 && slot2 && slot3) count = modulo(count + tile(column + 1, n, dp, false, true));
	if (slot1 && slot2 && slot4) count = modulo(count + tile(column + 1, n, dp, true, false));
	if (slot1 && slot2 && slot3 && slot4) count = modulo(count + tile(column + 1, n, dp, false, false));
	if (slot1 && !slot2 && slot3) count = modulo(count + tile(column + 1, n, dp, false, true));
	if (slot1 && !slot2 && slot3 && slot4) count = modulo(count + tile(column + 1, n, dp, false, false));
	if (!slot1 && slot2 && slot4) count = modulo(count + tile(column + 1, n, dp, true, false));
	if (!slot1 && slot2 && slot3 && slot4) count = modulo(count + tile(column + 1, n, dp, false, false));
	if (!slot1 && !slot2) count = modulo(count + tile(column + 1, n, dp, true, true));

	dp[state][column] = count;
	return count;
};

var getState = function(slot1, slot2) {
	let state = 0;
	if (!slot1) state |= 1;
	if (!slot2) state |= 2;

	return state;
};

var modulo = function(num) {
	return num % 1000000007;
};
```

```JavaScript
/**
 * @param {number} n
 * @return {number}
 */
var numTilings = function(n) {
    const MOD = 1e9 + 7;

    let dp = Array.from({length: n + 1}, x => [0, 0, 0]);

    dp[0][0] = 1;
    dp[1][0] = 1;

    for (let i = 2; i <= n; i++) {
        dp[i][0] = (dp[i - 1][0] + dp[i - 2][0] + dp[i - 1][1] + dp[i - 1][2]) % MOD;
        dp[i][1] = (dp[i - 2][0] + dp[i - 1][2]) % MOD;
        dp[i][2] = (dp[i - 2][0] + dp[i - 1][1]) % MOD;
    }

    return dp[n][0];
};
```