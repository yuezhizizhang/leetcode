828. Count Unique Characters of All Substrings of a Given String
https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/

Let's define a function countUniqueChars(s) that returns the number of unique characters on s.

For example if s = "LEETCODE" then "L", "T", "C", "O", "D" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.
Given a string s, return the sum of countUniqueChars(t) where t is a substring of s.

Notice that some substrings can be repeated so in this case you have to count the repeated ones too.

Example 1:
Input: s = "ABC"
Output: 10
Explanation: All possible substrings are: "A","B","C","AB","BC" and "ABC".
Evey substring is composed with only unique letters.
Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10

Example 2:
Input: s = "ABA"
Output: 8
Explanation: The same as example 1, except countUniqueChars("ABA") = 1.

Example 3:
Input: s = "LEETCODE"
Output: 92

Constraints:
1 <= s.length <= 105
s consists of uppercase English letters only.

```C#
public class Solution {
    private const char A = 'A';

    public int UniqueLetterString(string s)
    {
        var count = 0;

        var occurs1 = new int[26];
        Array.Fill(occurs1, -1);
        var occurs2 = new int[26];
        Array.Fill(occurs2, -1);

        for (var i = 0; i < s.Length; i++)
        {
            var ch = s[i] - A;
            count += (occurs2[ch] - occurs1[ch]) * (i - occurs2[ch]);
            occurs1[ch] = occurs2[ch];
            occurs2[ch] = i;
        }

        var current = s.Length;
        for (var i = 0; i < occurs2.Length; i++)
        {
            if (occurs2[i] < 0) continue;

            count += (occurs2[i] - occurs1[i]) * (current - occurs2[i]);
        }

        return count;
    }
}
```