## 1477. Find Two Non-overlapping Sub-arrays Each With Target Sum
https://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/

Given an array of integers arr and an integer target.

You have to find two non-overlapping sub-arrays of arr each with a sum equal target. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.

Return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.

Example 1:
  Input: arr = [3,2,2,4,3], target = 3
  Output: 2
Explanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.

Example 2:
  Input: arr = [7,3,4,7], target = 7
  Output: 2
Explanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.

Example 3:
  Input: arr = [4,3,2,6,2,3,4], target = 6
  Output: -1
Explanation: We have only one sub-array of sum = 6.

Example 4:
  Input: arr = [5,5,4,4,5], target = 3
  Output: -1
Explanation: We cannot find a sub-array of sum = 3.

Example 5:
  Input: arr = [3,1,1,1,5,1,2,1], target = 3
  Output: 3
Explanation: Note that sub-arrays [1,2] and [2,1] cannot be an answer because they overlap.

Constraints:
* 1 <= arr.length <= 105
* 1 <= arr[i] <= 1000
* 1 <= target <= 108

** Solution **

How to compute the minimum length of 2 unoverlapped windows? Please refer to "727. Minimum Window Subsequence".

```C#
public class Solution {
    public int MinSumOfLengths(int[] arr, int target)
    {
        if (arr == null || arr.Length < 2) return -1;

        var minLengths = new int[2];
        Array.Fill(minLengths, -1);

        var size = arr.Length;
        var start = 0;
        var end = 0;
        var sum = 0;
        var windows = new Dictionary<int, Window>();
        while (end < size)
        {
            sum += arr[end++];

            if (sum > target)
            {
                do
                {
                    sum -= arr[start++];
                } while (sum > target);
            }

            if (sum == target)
            {
                windows.Add(start, new Window(start, end));
                sum -= arr[start++];
            }
        }

        var next = new int[size];
        next[size - 1] = 0;
        for (var i = next.Length - 1; i >= 0; i--)
        {
            if (i + 1 < next.Length) next[i] = next[i + 1];

            if (windows.ContainsKey(i))
            {
                var len = windows[i].Length;
                if (next[i] <= 0 || len < next[i]) next[i] = len;
            }
        }

        var minLength = -1;
        foreach (var w in windows.Values)
        {
            if (w.End < size && next[w.End] > 0)
            {
                var totalLength = w.Length + next[w.End];
                if (minLength < 0 || totalLength < minLength) minLength = totalLength;
            }
        }


        return minLength;
    }

    class Window
    {
        public int Start { get; set; }
        public int End { get; set; }
        public int Length { get; private set; }

        public Window(int start, int end)
        {
            this.Start = start;
            this.End = end;
            this.Length = this.End - this.Start;
        }
    }
}
```

```JavaScript
/**
 * @param {number[]} arr
 * @param {number} target
 * @return {number}
 */
var minSumOfLengths = function(arr, target) {
    if (!arr || arr.length === 0) return -1;

    const size = arr.length;

    let start = 0;
    let end = 0;
    let sum = 0;
    let windows = new Map();
    while (end < size) {
        sum += arr[end++];

        if (sum > target) {
            do {
                sum -= arr[start++];
            } while (sum > target)
        }

        if (sum === target) {
            windows.set(start, {start: start, end: end, length: end - start});
            sum -= arr[start++];
        }
    }

    let maxLengths = new Array(size);
    maxLengths.fill(-1);
    for (let i = size - 1; i >= 0; i--) {
        if (i < size - 1) maxLengths[i] = maxLengths[i + 1];

        if (windows.has(i)) {
            const length = windows.get(i).length;
            if (maxLengths[i] < 0 || length < maxLengths[i]) maxLengths[i] = length;
        }
    }

    let max = -1;
    for (let window of windows.values()) {
        if (window.end >= size || maxLengths[window.end] < 0) continue;

        const length = window.length + maxLengths[window.end];
        if (max < 0 || length < max) max = length;
    }

    return max;
};
```