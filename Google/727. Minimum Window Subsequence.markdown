## 727. Minimum Window Subsequence
https://leetcode.com/problems/minimum-window-subsequence/

Given strings s1 and s2, return the minimum contiguous substring part of s1, so that s2 is a subsequence of the part.

If there is no such window in s1 that covers all characters in s2, return the empty string "". If there are multiple such minimum-length windows, return the one with the left-most starting index.

Example 1:
  Input: s1 = "abcdebdde", s2 = "bde"
  Output: "bcde"
Explanation: 
  "bcde" is the answer because it occurs before "bdde" which has the same length.
  "deb" is not a smaller window because the elements of s2 in the window must occur in order.

Example 2:
  Input: s1 = "jmeqksfrsdcmsiwvaovztaqenprpvnbstl", s2 = "u"
  Output: ""

Constraints:
* 1 <= s1.length <= 2 * 104
* 1 <= s2.length <= 100
* s1 and s2 consist of lowercase English letters.

** Solution **

https://www.youtube.com/watch?v=c8AgVpUtkwE


```C#
public class Solution {
    public string MinWindow(string s1, string s2) {
        if (string.IsNullOrEmpty(s1)
            || string.IsNullOrEmpty(s2)
            || s1.Length < s2.Length)
                return string.Empty;

        var next = new int[s1.Length][];
        for (var i = 0; i < s1.Length; i++)
        {
            next[i] = new int[26];
            Array.Fill(next[i], -1);
        }

        for (var i = s1.Length - 2; i >= 0; i--)
        {
            for (var j = 0; j < 26; j++) next[i][j] = next[i + 1][j];

            var ch = s1[i + 1] - 'a';
            next[i][ch] = i + 1;
        }

        var startWith = s2[0];
        var starts = new List<int>();
        for (var i = 0; i < s1.Length; i++)
        {
            if (s1[i] == startWith)
            {
                starts.Add(i);
            }
        }

        var startIndex = -1;
        var length = -1;
        foreach (var start in starts)
        {
            var end = start;
            var notFound = false;
            for (var i = 1; i < s2.Length; i++)
            {
                end = next[end][s2[i] - 'a'];
                if (end == -1)
                {
                    notFound = true;
                    break;
                }
            }

            if (notFound) continue;

            if (startIndex < 0 || end - start + 1 < length)
            {
                startIndex = start;
                length = end - start + 1;
            }
        }

        return startIndex < 0 ? string.Empty : s1.Substring(startIndex, length);
    }
}
```

```JavaScript
/**
 * @param {string} s1
 * @param {string} s2
 * @return {string}
 */
var minWindow = function(s1, s2) {
  if (!s1 || !s2 || s1.length < s2.length) return '';

  const size = 26;
  const charA = "a".charCodeAt(0);

  let next = [];
  for (let i = 0; i < s1.length; i++) {
    next.push(new Array(size));
    next[i].fill(-1);
  }

  for (let i = s1.length - 2; i >= 0; i--) {
    for (j = 0; j < size; j++) {
      next[i][j] = next[i + 1][j];
    }

    const ch = s1[i + 1].charCodeAt(0) - charA;
    next[i][ch] = i + 1;
  }

  let starts = [];
  for (let i = 0; i < s1.length; i++) {
    if (s1[i] === s2[0]) starts.push(i);
  }

  let startIndex = -1;
  let minLength = 0;
  for (const start of starts) {
    let end = start;
    for (let i = 1; i < s2.length; i++) {
      end = next[end][s2[i].charCodeAt(0) - charA];
      if (end < 0) break;
    }

    if (end < 0) continue;

    if (startIndex < 0 || end - start + 1 < minLength) {
      startIndex = start;
      minLength = end - start + 1;
    }
  }

  return startIndex < 0 ? '' : s1.substr(startIndex, minLength);
};
```