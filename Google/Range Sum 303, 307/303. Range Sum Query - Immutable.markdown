303. Range Sum Query - Immutable
https://leetcode.com/problems/range-sum-query-immutable/

Given an integer array nums, handle multiple queries of the following type:

Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 

Example 1:

Input
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output
[null, 1, -1, -3]

Explanation
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3
 

Constraints:
* 1 <= nums.length <= 104
* -105 <= nums[i] <= 105
* 0 <= left <= right < nums.length
* At most 104 calls will be made to sumRange.

```C#
public class NumArray {

    private int[] Sums { get; set; }

    public NumArray(int[] nums)
    {
        if (nums == null || nums.Length == 0) throw new ArgumentException("nums array is null or empty.");

        this.Sums = new int[nums.Length];
        this.Sums[0] = nums[0];
        for (var i = 1; i < nums.Length; i++)
        {
            this.Sums[i] = nums[i] + this.Sums[i - 1];
        }
    }

    public int SumRange(int left, int right)
    {
        if (left < 0 || right >= this.Sums.Length || left > right) throw new ArgumentOutOfRangeException();

        var subtract = left == 0 ? 0 : this.Sums[left - 1];
        return this.Sums[right] - subtract;
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * int param_1 = obj.SumRange(left,right);
 */
```

```JavaScript
/**
 * @param {number[]} nums
 */
var NumArray = function(nums) {
    if (!nums || nums.length < 0) return;

    this.sums = [nums[0]];
    for (let i = 1; i < nums.length; i++) {
    	this.sums.push(nums[i] + this.sums[i - 1]);
    }
};

/** 
 * @param {number} left 
 * @param {number} right
 * @return {number}
 */
NumArray.prototype.sumRange = function(left, right) {
    if (left < 0 || right >= this.sums.length || left > right) return;

    const subtract = left == 0 ? 0 : this.sums[left - 1];
    return this.sums[right] - subtract;
};

/** 
 * Your NumArray object will be instantiated and called as such:
 * var obj = new NumArray(nums)
 * var param_1 = obj.sumRange(left,right)
 */
```