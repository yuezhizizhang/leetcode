307. Range Sum Query - Mutable
https://leetcode.com/problems/range-sum-query-mutable/

Given an integer array nums, handle multiple queries of the following types:

1. Update the value of an element in nums.
2. Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.

Implement the NumArray class:
* NumArray(int[] nums) Initializes the object with the integer array nums.
* void update(int index, int val) Updates the value of nums[index] to be val.
* int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 

Example 1:

Input
["NumArray", "sumRange", "update", "sumRange"]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]

Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9
numArray.update(1, 2);   // nums = [1, 2, 5]
numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8
 

Constraints:
* 1 <= nums.length <= 3 * 104
* -100 <= nums[i] <= 100
* 0 <= index < nums.length
* -100 <= val <= 100
* 0 <= left <= right < nums.length
* At most 3 * 104 calls will be made to update and sumRange.

** Solution **
Segment Tree: https://www.youtube.com/watch?v=a9WoSN2tN8o
Segment Tree Implementation: https://cp-algorithms.com/data_structures/segment_tree.html

```C#
public class NumArray {

    private int _size;
    private int[] _tree;

    public NumArray(int[] nums)
    {
        if (nums == null || nums.Length <= 0) throw new ArgumentException("number array can't be empty");

        this._size = nums.Length;
        this._tree = new int[4 * this._size];
        this.BuildTree(nums, 0, this._size - 1, 1);
    }

    public void Update(int index, int val)
    {
        if (index < 0 || index >= this._size) return;

        this.UpdateTree(0, this._size - 1, index, 1, val);
    }

    public int SumRange(int left, int right)
    {
        return this.SumTree(left, right, 0, this._size - 1, 1);
    }

    private void BuildTree(int[] nums, int left, int right, int index)
    {
        if (left == right)
        {
            this._tree[index] = nums[left];
            return;
        }

        var mid = (left + right) / 2;
        var leftChild = index << 1;
        var rightChild = index << 1 | 1;
        this.BuildTree(nums, left, mid, leftChild);
        this.BuildTree(nums, mid + 1, right, rightChild);
        this._tree[index] = this._tree[leftChild] + this._tree[rightChild];
    }

    private void UpdateTree(int left, int right, int pos, int index, int value)
    {
        if (left == right)
        {
            this._tree[index] = value;
            return;
        }

        var mid = (left + right) / 2;
        var leftChild = index << 1;
        var rightChild = index << 1 | 1;
        if (pos <= mid)
        {
            this.UpdateTree(left, mid, pos, leftChild, value);
        }
        else
        {
            this.UpdateTree(mid + 1, right, pos, rightChild, value);
        }

        this._tree[index] = this._tree[leftChild] + this._tree[rightChild];
    }

    private int SumTree(int qleft, int qright, int left, int right, int index)
    {
        if (left >= qleft && right <= qright) return this._tree[index];
        if (right < qleft || left > qright) return 0;

        var mid = (left + right) / 2;
        return this.SumTree(qleft, qright, left, mid, index << 1) +
            this.SumTree(qleft, qright, mid + 1, right, index << 1 | 1);
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.Update(index,val);
 * int param_2 = obj.SumRange(left,right);
 */
```

```JavaScript
/**
 * @param {number[]} nums
 */
var NumArray = function(nums) {
    this.size = nums.length;
    this.tree = new Array(this.size * 4);
    this.tree.fill(0);
    this.buildTree(nums, 0, this.size - 1, 1);
};

/** 
 * @param {number} index 
 * @param {number} val
 * @return {void}
 */
NumArray.prototype.update = function(index, val) {
    this.updateTree(0, this.size - 1, index, 1, val);
};

/** 
 * @param {number} left 
 * @param {number} right
 * @return {number}
 */
NumArray.prototype.sumRange = function(left, right) {
    return this.sumTree(left, right, 0, this.size - 1, 1);
};

NumArray.prototype.buildTree = function(nums, left, right, index) {
	if (left === right) {
		this.tree[index] = nums[left];
		return;
	}

	var mid = Math.floor((left + right) / 2);
	var leftChild = index << 1;
	var rightChild = index << 1 | 1;
	this.buildTree(nums, left, mid, leftChild);
	this.buildTree(nums, mid + 1, right, rightChild);
	this.tree[index] = this.tree[leftChild] + this.tree[rightChild];
};

NumArray.prototype.updateTree = function(left, right, index, pos, val) {
	if (left === right) {
		this.tree[pos] = val;
		return;
	}

	var mid = Math.floor((left + right) / 2);
	var leftChild = pos << 1;
	var rightChild = pos << 1 | 1;
	if (index <= mid) {
		this.updateTree(left, mid, index, leftChild, val);
	} else {
		this.updateTree(mid + 1, right, index, rightChild, val);
	}
	this.tree[pos] = this.tree[leftChild] + this.tree[rightChild];
};

NumArray.prototype.sumTree = function(qLeft, qRight, left, right, index) {
	if (left >= qLeft && right <= qRight) return this.tree[index];
	if (right < qLeft || left > qRight) return 0;

	var mid = Math.floor((left + right) / 2);
	var leftChild = index << 1;
	var rightChild = index << 1 | 1;
	return this.sumTree(qLeft, qRight, left, mid, leftChild)
		+ this.sumTree(qLeft, qRight, mid + 1, right, rightChild);
};

/** 
 * Your NumArray object will be instantiated and called as such:
 * var obj = new NumArray(nums)
 * obj.update(index,val)
 * var param_2 = obj.sumRange(left,right)
 */
```
