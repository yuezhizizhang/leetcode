## 690. Employee Importance
https://leetcode.com/problems/employee-importance/

You have a data structure of employee information, which includes the employee's unique id, their importance value, and their direct subordinates' id.

You are given an array of employees employees where:

* employees[i].id is the ID of the ith employee.
* employees[i].importance is the importance value of the ith employee.
* employees[i].subordinates is a list of the IDs of the subordinates of the ith employee.

Given an integer id that represents the ID of an employee, return the total importance value of this employee and all their subordinates.

Example 1:
  Input: employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1
  Output: 11
  Explanation: Employee 1 has importance value 5, and he has two direct subordinates: employee 2 and employee 3.
  They both have importance value 3.
  So the total importance value of employee 1 is 5 + 3 + 3 = 11.

Example 2:
  Input: employees = [[1,2,[5]],[5,-3,[]]], id = 5
  Output: -3

Constraints:
* 1 <= employees.length <= 2000
* 1 <= employees[i].id <= 2000
* All employees[i].id are unique.
* -100 <= employees[i].importance <= 100
* One employee has at most one direct leader and may have several subordinates.
* id is guaranteed to be a valid employee id.

```C#
/*
// Definition for Employee.
class Employee {
    public int id;
    public int importance;
    public IList<int> subordinates;
}
*/

class Solution {
    public int GetImportance(IList<Employee> employees, int id)
    {
        var employeesMap = new Dictionary<int, Employee>();

        foreach (var e in employees)
        {
            employeesMap.Add(e.id, e);
        }

        return dfs(id, employeesMap);
    }

    private int dfs(int id, IDictionary<int, Employee> map)
    {
        var e = map[id];
        var sum = e.importance;
        var subordinates = e.subordinates;
        foreach (var key in subordinates)
        {
            sum += dfs(key, map);
        }

        return sum;
    }
}
```

```JavaScript
/**
 * Definition for Employee.
 * function Employee(id, importance, subordinates) {
 *     this.id = id;
 *     this.importance = importance;
 *     this.subordinates = subordinates;
 * }
 */

/**
 * @param {Employee[]} employees
 * @param {number} id
 * @return {number}
 */
var GetImportance = function(employees, id) {
    let map = new Map();
    for (const e of employees) {
    	map.set(e.id, e);
    }

    return dfs(id, map);
};

var dfs = function(id, map) {
	const e = map.get(id);
	let sum = e.importance;

	let subordinates = e.subordinates;
	for (const key of subordinates) {
		sum += dfs(key, map);
	}

	return sum;
};
```