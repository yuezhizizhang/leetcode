https://leetcode.com/problems/the-most-similar-path-in-a-graph/

We have n cities and m bi-directional roads where roads[i] = [ai, bi] connects city ai with city bi. Each city has a name consisting of exactly three upper-case English letters given in the string array names. Starting at any city x, you can reach any city y where y != x (i.e., the cities and the roads are forming an undirected connected graph).

You will be given a string array targetPath. You should find a path in the graph of the same length and with the minimum edit distance to targetPath.

You need to return the order of the nodes in the path with the minimum edit distance. The path should be of the same length of targetPath and should be valid (i.e., there should be a direct road between ans[i] and ans[i + 1]). If there are multiple answers return any one of them.

The edit distance is defined as follows:

Example 1:

Input: n = 5, roads = [[0,2],[0,3],[1,2],[1,3],[1,4],[2,4]], names = ["ATL","PEK","LAX","DXB","HND"], targetPath = ["ATL","DXB","HND","LAX"]
Output: [0,2,4,2]
Explanation: [0,2,4,2], [0,3,0,2] and [0,3,1,2] are accepted answers.
[0,2,4,2] is equivalent to ["ATL","LAX","HND","LAX"] which has edit distance = 1 with targetPath.
[0,3,0,2] is equivalent to ["ATL","DXB","ATL","LAX"] which has edit distance = 1 with targetPath.
[0,3,1,2] is equivalent to ["ATL","DXB","PEK","LAX"] which has edit distance = 1 with targetPath.

Example 2:

Input: n = 4, roads = [[1,0],[2,0],[3,0],[2,1],[3,1],[3,2]], names = ["ATL","PEK","LAX","DXB"], targetPath = ["ABC","DEF","GHI","JKL","MNO","PQR","STU","VWX"]
Output: [0,1,0,1,0,1,0,1]
Explanation: Any path in this graph has edit distance = 8 with targetPath.

Example 3:

Input: n = 6, roads = [[0,1],[1,2],[2,3],[3,4],[4,5]], names = ["ATL","PEK","LAX","ATL","DXB","HND"], targetPath = ["ATL","DXB","HND","DXB","ATL","LAX","PEK"]
Output: [3,4,5,4,3,2,1]
Explanation: [3,4,5,4,3,2,1] is the only path with edit distance = 0 with targetPath.
It's equivalent to ["ATL","DXB","HND","DXB","ATL","LAX","PEK"]

Constraints:

2 <= n <= 100
m == roads.length
n - 1 <= m <= (n * (n - 1) / 2)
0 <= ai, bi <= n - 1
ai != bi
The graph is guaranteed to be connected and each pair of nodes may have at most one direct road.
names.length == n
names[i].length == 3
names[i] consists of upper-case English letters.
There can be two cities with the same name.
1 <= targetPath.length <= 100
targetPath[i].length == 3
targetPath[i] consists of upper-case English letters.

Follow up: If each node can be visited only once in the path, What should you change in your solution?

** Solution **

Store the undirected graph in adjacency list.
Create an array dp where dp[i][j] is the min edit distance for the path starting at node i and compared to index j of the targetPath.


```C#
public class Solution
{
    public IList<int> MostSimilar(int n, int[][] roads, string[] names, string[] targetPath)
    {
        if (n != names.Length) throw new ArgumentException("The number of vertices is wrong.");

        // Edges
        var edges = new IList<int>[n];
        for (var i = 0; i < n; i++)
        {
            edges[i] = new List<int>();
        }
        foreach (var pair in roads)
        {
            var n1 = pair[0];
            var n2 = pair[1];
            edges[n1].Add(n2);
            edges[n2].Add(n1);
        }

        var dp = new PathEdit[n][];
        for (var i = 0; i < n; i++)
        {
            dp[i] = new PathEdit[targetPath.Length];
        }

        PathEdit minEdit = null;
        for (var i = 0; i < n; i++)
        {
            var edit = FindMinimumEdits(i, 0, dp, names, targetPath, edges);

            if (minEdit == null || edit.Edits < minEdit.Edits) minEdit = edit;

            if (minEdit.Edits == 0) break;
        }

        return minEdit.Path;
    }

    private PathEdit FindMinimumEdits(int v, int t, PathEdit[][] dp, string[] names, string[] targetPath, IList<int>[] edges)
    {
        if (dp[v][t] != null) return dp[v][t];

        if (t == targetPath.Length - 1)
        {
            var edit = new PathEdit()
            {
                Path = new List<int> { v },
                Edits = names[v] == targetPath[t] ? 0 : 1,
            };

            dp[v][t] = edit;
            return edit;
        }

        var connects = edges[v];
        PathEdit minEdit = null;
        foreach (var n in connects)
        {
            var edit = FindMinimumEdits(n, t + 1, dp, names, targetPath, edges);

            if (minEdit == null || edit.Edits < minEdit.Edits) minEdit = edit;
        }

        PathEdit pathEdit = new PathEdit();
        pathEdit.Edits = minEdit.Edits + (names[v] == targetPath[t] ? 0 : 1);
        pathEdit.Path = new List<int> { v };
        pathEdit.Path.AddRange(minEdit.Path);
        dp[v][t] = pathEdit;
        return pathEdit;
    }

    private class PathEdit
    {
        public int Edits { get; set; }
        public List<int> Path { get; set; }
    }
}
```

```JavaScript
/**
 * @param {number} n
 * @param {number[][]} roads
 * @param {string[]} names
 * @param {string[]} targetPath
 * @return {number[]}
 */
var mostSimilar = function(n, roads, names, targetPath) {
    let edges = [];
    for (let i = 0; i < n; i++) {
    	edges.push([]);
    }

    for (let i = 0; i < roads.length; i++) {
    	const [n1, n2] = roads[i];
    	edges[n1].push(n2);
    	edges[n2].push(n1);
    }

    let dp = [];
    for (let i = 0; i < n; i++) {
    	dp.push(new Array(targetPath.length));
    }

    let minEdit = null;
    for (let i = 0; i < n; i ++) {
        const edit = findMinimumEdits(i, 0, dp, names, edges, targetPath);
        if (minEdit === null || edit.edits < minEdit.edits) minEdit = edit;
        if (minEdit.edits === 0) return minEdit.path;
    }

    return minEdit.path;
};

var findMinimumEdits = function(n, t, dp, names, edges, targetPath) {
    if (dp[n][t] !== undefined) return dp[n][t];

    if (t === targetPath.length - 1) {
        const edit = {
            edits: names[n] === targetPath[t] ? 0 : 1,
            path: [n]
        };

        dp[n][t] = edit;
        return edit;
    }

    const connects = edges[n];
    let minEdit = null;
    connects.forEach(v => {
        const edit = findMinimumEdits(v, t + 1, dp, names, edges, targetPath);
        if (minEdit === null || edit.edits < minEdit.edits) minEdit = edit;
    });

    const edit = {
        edits: (names[n] === targetPath[t] ? 0 : 1) + minEdit.edits,
        path: [n, ...minEdit.path]
    };

    dp[n][t] = edit;
    return edit;
};
```