https://leetcode.com/problems/longest-increasing-path-in-a-matrix/

Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

Example 1:
Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].

Example 2:
Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.

Example 3:
Input: matrix = [[1]]
Output: 1

Constraints:
* m == matrix.length
* n == matrix[i].length
* 1 <= m, n <= 200
* 0 <= matrix[i][j] <= 231 - 1

** Solution **

```C#
public class Solution {
    public int LongestIncreasingPath(int[][] matrix)
    {
        if (matrix == null || matrix.Length <= 0) return 0;

        var rows = matrix.Length;
        var columns = matrix[0].Length;
        var dp = new int[rows][];
        for (var i = 0; i < rows; i++)
        {
            dp[i] = new int[columns];
        }

        var max = 0;
        for (var i = 0; i < rows; i++)
        {
            for (var j = 0; j < columns; j++)
            {
                max = Math.Max(max, CalculateLongestPath(i, j, rows, columns, matrix, dp));
            }
        }

        return max;
    }

    private int CalculateLongestPath(int row, int column, int rows, int columns, int[][] matrix, int[][] dp)
    {
        if (dp[row][column] != 0) return dp[row][column];

        var max = 0;

        // Top
        if (row - 1 >= 0 && matrix[row][column] < matrix[row - 1][column])
        {
            max = Math.Max(max, CalculateLongestPath(row - 1, column, rows, columns, matrix, dp));
        }

        // Left
        if (column - 1 >= 0 && matrix[row][column] < matrix[row][column - 1])
        {
            max = Math.Max(max, CalculateLongestPath(row, column - 1, rows, columns, matrix, dp));
        }

        // Right
        if (column + 1 < columns && matrix[row][column] < matrix[row][column + 1])
        {
            max = Math.Max(max, CalculateLongestPath(row, column + 1, rows, columns, matrix, dp));
        }

        // Bottom
        if (row + 1 < rows && matrix[row][column] < matrix[row + 1][column])
        {
            max = Math.Max(max, CalculateLongestPath(row + 1, column, rows, columns, matrix, dp));
        }

        dp[row][column] = ++max;
        return max;
    }
}
```

```JavaScript
/**
 * @param {number[][]} matrix
 * @return {number}
 */
var longestIncreasingPath = function(matrix) {
    if (!matrix || !matrix[0] || matrix[0].length <= 0) return 0;

    const rows = matrix.length;
    const columns = matrix[0].length;
    let dp = new Array(rows);
    for (let i = 0; i < rows; i++) {
    	dp[i] = new Array(columns);
    }

    let max = 0;
    for (let i = 0; i < rows; i++) {
    	for (let j = 0; j < columns; j++) {
    		max = Math.max(max, calculateLongestPath(i, j, rows, columns, matrix, dp));
    	}
    }

    return max;
};

var calculateLongestPath = function(row, column, rows, columns, matrix, dp) {
	if (!!dp[row][column]) return dp[row][column];

	let max = 0;

	// Top
	if (row - 1 >= 0 && matrix[row][column] < matrix[row - 1][column]) {
		max = Math.max(max, calculateLongestPath(row - 1, column, rows, columns, matrix, dp));
	}

	// Bottom
	if (row + 1 < rows && matrix[row][column] < matrix[row + 1][column]) {
		max = Math.max(max, calculateLongestPath(row + 1, column, rows, columns, matrix, dp));
	}

	// Left
	if (column - 1 >= 0 && matrix[row][column] < matrix[row][column - 1]) {
		max = Math.max(max, calculateLongestPath(row, column - 1, rows, columns, matrix, dp));
	}

	// Right
	if (column + 1 < columns && matrix[row][column] < matrix[row][column + 1]) {
		max = Math.max(max, calculateLongestPath(row, column + 1, rows, columns, matrix, dp));
	}

	dp[row][column] = ++max;
	return max;
};
```