715. Range Module
https://leetcode.com/problems/range-module/

A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as half-open intervals and query about them.

A half-open interval [left, right) denotes all the real numbers x where left <= x < right.

Implement the RangeModule class:

RangeModule() Initializes the object of the data structure.
void addRange(int left, int right) Adds the half-open interval [left, right), tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked.
boolean queryRange(int left, int right) Returns true if every real number in the interval [left, right) is currently being tracked, and false otherwise.
void removeRange(int left, int right) Stops tracking every real number currently being tracked in the half-open interval [left, right).

Example 1:

Input
["RangeModule", "addRange", "removeRange", "queryRange", "queryRange", "queryRange"]
[[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]
Output
[null, null, null, true, false, true]

Explanation
RangeModule rangeModule = new RangeModule();
rangeModule.addRange(10, 20);
rangeModule.removeRange(14, 16);
rangeModule.queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked)
rangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)
rangeModule.queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation)

Constraints:

* 1 <= left < right <= 109
* At most 104 calls will be made to addRange, queryRange, and removeRange.

** Solution **
https://leetcode.com/problems/insert-interval/

```C#
public class RangeModule {

    private SortedList<int, int> Ranges { get; set; }

    public RangeModule()
    {
        this.Ranges = new SortedList<int, int>();
    }

    public void AddRange(int left, int right)
    {
        var starts = this.Ranges.Keys;
        var ends = this.Ranges.Values;
        var size = starts.Count;

        int i;
        for (i = 0; i < size; i++)
        {
            if (left <= ends[i]) break;
        }

        if (i >= size)
        {
            this.Ranges.Add(left, right);
            return;
        }

        if (right < starts[i])
        {
            this.Ranges.Add(left, right);
            return;
        }

        left = Math.Min(starts[i], left);
        int j;
        for (j = i; j < size; j++)
        {
            if (right < starts[j]) break;
        }

        right = Math.Max(right, ends[j - 1]);
        for (var index = j - 1; index >= i; index --)
        {
            this.Ranges.RemoveAt(index);
        }
        this.Ranges.Add(left, right);
    }

    public bool QueryRange(int left, int right)
    {
        foreach (var pair in this.Ranges)
        {
            if (left >= pair.Key && right <= pair.Value) return true;

            if (left <= pair.Value) return false;
        }

        return false;
    }

    public void RemoveRange(int left, int right)
    {
        var starts = this.Ranges.Keys;
        var ends = this.Ranges.Values;
        var size = starts.Count;

        int i;
        for (i = 0; i < size; i++)
        {
            if (left < ends[i]) break;
        }

        if (i >= size) return;

        if (right <= starts[i]) return;

        int j = i;
        for (; j < size; j++)
        {
            if (right < starts[j]) break;
        }

        var begin = starts[i];
        var end = ends[j - 1];
        for (var index = j - 1; index >= i; index--)
        {
            this.Ranges.RemoveAt(index);
        }

        if (left > begin) this.Ranges.Add(begin, left);

        if (right < end) this.Ranges.Add(right, end);
    }
}

/**
 * Your RangeModule object will be instantiated and called as such:
 * RangeModule obj = new RangeModule();
 * obj.AddRange(left,right);
 * bool param_2 = obj.QueryRange(left,right);
 * obj.RemoveRange(left,right);
 */
```