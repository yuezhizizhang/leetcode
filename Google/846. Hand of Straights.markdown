## 846. Hand of Straights
https://leetcode.com/problems/hand-of-straights/

> Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.
> Given an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.
>
> Example 1:
>   Input: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3
>   Output: true
>   Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]
>
> Example 2:
>   Input: hand = [1,2,3,4,5], groupSize = 4
>   Output: false
>   Explanation: Alice's hand can not be rearranged into groups of 4.
>
> Constraints:
> * 1 <= hand.length <= 104
> * 0 <= hand[i] <= 109
> * 1 <= groupSize <= hand.length

** Solution **

```C#
public class Solution {
    public bool IsNStraightHand(int[] hand, int groupSize) {
        if (hand.Length % groupSize != 0) return false;

        Array.Sort(hand);

        var counter = new Dictionary<int, int>();
        foreach (var num in hand)
        {
            if (counter.ContainsKey(num))
                counter[num]++;
            else
                counter[num] = 1;
        }

        foreach (var num in hand)
        {
            if (counter[num] == 0) continue;

            counter[num]--;
            for (var i = 1; i < groupSize; i++)
            {
                var value = num + i;
                if (counter.ContainsKey(value) && counter[value] > 0)
                    counter[value]--;
                else
                    return false;
            }
        }

        return true;
    }
}
```

```JavaScript
/**
 * @param {number[]} hand
 * @param {number} groupSize
 * @return {boolean}
 */
var isNStraightHand = function(hand, groupSize) {
    if (hand.length % groupSize !== 0) {
        return false;
    }

    let counter = new Map();
    for (let num of hand) {
        if (counter.has(num)) {
            counter.set(num, counter.get(num) + 1);
        } else {
            counter.set(num, 1);
        }
    }

    let sorted = [...counter.keys()].sort((a, b) => a - b);
    for (let num of sorted) {
        let cnt = counter.get(num);

        if (cnt === 0) continue;

        for (let i = 1; i < groupSize; i++) {
            let next = num + i;

            if (!counter.has(next) || counter.get(next) < cnt) {
                return false;
            }

            counter.set(next, counter.get(next) - cnt);
        }
    }

    return true;
};

/**
 * @param {number[]} hand
 * @param {number} groupSize
 * @return {boolean}
 */
var isNStraightHandSlow = function(hand, groupSize) {
    if (hand.length % groupSize !== 0) {
    	return false;
    }

    hand.sort((a, b) => a - b);

    let counter = {};
    for (let num of hand) {
    	if (counter.hasOwnProperty(num)) {
    		counter[num]++;
    	} else {
    		counter[num] = 1;
    	}
    }

    for (let num of hand) {
    	if (counter[num] === 0) continue;

    	counter[num]--;
    	for (let i = 1; i < groupSize; i++) {
    		let next = num + i;

    		if (!counter.hasOwnProperty(next) || counter[next] < 1) {
    			return false;
    		}

    		counter[next]--;
    	}
    }

    return true;
};
```