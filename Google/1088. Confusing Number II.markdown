## 1088. Confusing Number II
https://leetcode.com/problems/confusing-number-ii/

A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.

We can rotate digits of a number by 180 degrees to form new digits.

When 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6 respectively.
When 2, 3, 4, 5, and 7 are rotated 180 degrees, they become invalid.
Note that after rotating a number, we can ignore leading zeros.

For example, after rotating 8000, we have 0008 which is considered as just 8.
Given an integer n, return the number of confusing numbers in the inclusive range [1, n].

Example 1:
  Input: n = 20
  Output: 6
Explanation: The confusing numbers are [6,9,10,16,18,19].
  6 converts to 9.
  9 converts to 6.
  10 converts to 01 which is just 1.
  16 converts to 91.
  18 converts to 81.
  19 converts to 61.

Example 2:
  Input: n = 100
  Output: 19
Explanation: The confusing numbers are [6,9,10,16,18,19,60,61,66,68,80,81,86,89,90,91,98,99,100].

Constraints:
* 1 <= n <= 109

```C#
public class Solution {
    private readonly IDictionary<int, int> RotateTable = new Dictionary<int, int>
    {
        { 0, 0 },
        { 1, 1 },
        { 6, 9 },
        { 8, 8 },
        { 9, 6 },
    };

    public int ConfusingNumberII(int n)
    {
        if (n < 6) return 0;
        if (n < 9) return 1;
        if (n < 10) return 2;

        var total = 2;
        var multiply = 10;
        var rotatableDigits = new int[] { 1, 6, 8, 9 };
        var nums = new List<int> { 0, 1, 6, 8, 9 };

        while (true)
        {
            var count = nums.Count;
            foreach (var d in rotatableDigits)
            {
                var value = multiply * d;
                for (var i = 0; i < count; i++)
                {
                    var sum = value + nums[i];
                    if (sum > n) return total;

                    nums.Add(sum);
                    if (isConfusing(sum)) total++;
                }
            }
            multiply *= 10;
        }
    }

    public bool isConfusing(int n)
    {
        var old = n;
        var digits = new List<int>();
        while (n > 0)
        {
            digits.Add(n % 10);
            n /= 10;
        }

        var sum = 0;
        foreach (var d in digits)
        {
            sum *= 10;
            sum += RotateTable[d];                                                                                                                                                                                                                                                                         
        }

        return sum != old;
    }
}
```

```JavaScript
/**
 * @param {number} n
 * @return {number}
 */
var confusingNumberII = function(n) {
    const validConfusingDigits = [1, 6, 8, 9];

    if (n < 6) return 0;
    if (n < 9) return 1;
    if (n < 10) return 2;

    let count = 2;
    let multiply = 1;
    let nums = [0, 1, 6, 8, 9];
    while (true) {
        const length = nums.length;
        multiply *= 10;
        for (const d of validConfusingDigits) {
            const add = d * multiply;
            for (let i = 0; i < length; i ++) {
                const sum = add + nums[i];
                if (sum > n) return count;

                nums.push(sum);
                if (isConfusingNumber(sum)) count++;
            }
        }
    }
};

var isConfusingNumber = function(n) {
    const rotateDigits = { 0: 0, 1: 1, 6: 9, 8: 8, 9: 6 };
    const value = n;

    let num = 0;
    while(n > 0) {
        const d = n % 10;
        if (!rotateDigits.hasOwnProperty(d)) return false;

        num = num * 10 + rotateDigits[d];
        n = Math.floor(n / 10);
    }

    return num != value;
};
```