## 1277. Count Square Submatrices with All Ones
https://leetcode.com/problems/count-square-submatrices-with-all-ones/

Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.

Example 1:
  Input: matrix =
  [
    [0,1,1,1],
    [1,1,1,1],
    [0,1,1,1]
  ]
  Output: 15
Explanation: 
  There are 10 squares of side 1.
  There are 4 squares of side 2.
  There is  1 square of side 3.
  Total number of squares = 10 + 4 + 1 = 15.

Example 2:
  Input: matrix = 
  [
    [1,0,1],
    [1,1,0],
    [1,1,0]
  ]
  Output: 7
Explanation: 
  There are 6 squares of side 1.  
  There is 1 square of side 2. 
  Total number of squares = 6 + 1 = 7.

Solution:
https://www.youtube.com/watch?v=9k3zx_Q45dg


```C#
public class Solution {
    public int CountSquares(int[][] matrix)
    {
        var height = matrix.Length;
        var total = 0;
        for (var i = 0; i < height; i++)
        {
            var width = matrix[i].Length;
            for (var j = 0; j < width; j++)
            {
                if (matrix[i][j] == 0) continue;

                if (i == 0 || j == 0)
                {
                    total++;
                    continue;
                }

                var count = Math.Min(matrix[i][j - 1], Math.Min(matrix[i - 1][j - 1], matrix[i - 1][j]));
                matrix[i][j] = count + 1;
                total += matrix[i][j];
            }
        }

        return total;
    }
}
```

```JavaScript
/**
 * @param {number[][]} matrix
 * @return {number}
 */
var countSquares = function(matrix) {
    let total = 0;

    for (let i = 0; i < matrix.length; i++) {
      for (let j = 0; j < matrix[i].length; j++) {
        if (matrix[i][j] === 0) continue;

        if (i === 0 || j === 0) {
          total++;
          continue;
        }

        let min = Math.min(Math.min(matrix[i - 1][j - 1], matrix[i - 1][j]),
          matrix[i][j - 1]);
        matrix[i][j] = min + 1;
        total += matrix[i][j];
      }
    }

    return total;
};
```