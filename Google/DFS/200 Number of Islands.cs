using System;
using System.Collections.Generic;
using System.Linq;

namespace LeetCode
{
    class Program
    {
        static void Main(string[] args)
        {
            var intervals = new char[][] { 
                new char[] { '1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1' }, 
                new char[] { '0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0' },
                new char[] { '1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1' },
                new char[] { '1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1' },
                new char[] { '1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1' },
                new char[] { '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1' },
                new char[] { '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1' },
                new char[] { '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1' },
                new char[] { '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1' },
                new char[] { '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1' },
                new char[] { '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1' },
                new char[] { '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1' },
                new char[] { '1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1' },
                new char[] { '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1' },
                new char[] { '1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1' },
                new char[] { '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0' },
                new char[] { '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0' },
                new char[] { '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1' },
                new char[] { '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1' },
                new char[] { '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1' }
            };
            var solution = new Solution();
            var result = solution.NumIslands(intervals);
        }
    }

    public class Solution
    {
        public int NumIslands(char[][] grid)
        {
            var total = 0;

            for (var i = 0; i < grid.Length; i++)
            {
                for (var j = 0; j < grid[i].Length; j++)
                {
                    if (grid[i][j] == '1')
                    {
                        Visit(grid, i, j);
                        total++;
                    }
                }
            }

            return total;
        }

        private void Visit(char[][] grid, int row, int col)
        {
            var stack = new Stack<(int, int)>();

            stack.Push((row, col));
            while(stack.Count > 0)
            {
                var (i, j) = stack.Pop();
                grid[i][j] = '0';

                if (i - 1 >= 0 && grid[i - 1][j] == '1')
                {
                    stack.Push((i - 1, j));
                }

                if (i + 1 < grid.Length && grid[i + 1][j] == '1')
                {
                    stack.Push((i + 1, j));
                }

                if (j - 1 >= 0 && grid[i][j - 1] == '1')
                {
                    stack.Push((i, j - 1));
                }

                if (j + 1 < grid[i].Length && grid[i][j + 1] == '1')
                {
                    stack.Push((i, j + 1));
                }
            }
        }
    }
}
