https://leetcode.com/problems/max-area-of-island/

You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

Example 1:

Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6

Explanation: The answer is not 11, because the island must be connected 4-directionally.

Example 2:

Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
grid[i][j] is either 0 or 1.

** Solution **

```C#
public class Solution {
    public int MaxAreaOfIsland(int[][] grid)
    {
        if (grid.Length <= 0 || grid[0].Length <= 0) throw new ArgumentException();

        var height = grid.Length;
        var width = grid[0].Length;
        var max = 0;
        for (var i = 0; i < height; i++)
        {
            for (var j = 0; j < width; j++)
            {
                if (grid[i][j] == 1) max = Math.Max(max, DfsVisit(grid, i, j, width, height));
            }
        }

        return max;
    }

    public int DfsVisit(int[][] grid, int row, int column, int width, int height)
    {
        if (grid[row][column] != 1) return 0;

        grid[row][column] = 0;

        var max = 1;

        // Top
        if (row - 1 >= 0 && grid[row - 1][column] == 1)
        {
            max += DfsVisit(grid, row - 1, column, width, height);
        }

        // Left
        if (column - 1 >= 0 && grid[row][column - 1] == 1)
        {
            max += DfsVisit(grid, row, column - 1, width, height);
        }

        // Right
        if (column + 1 < width && grid[row][column + 1] == 1)
        {
            max += DfsVisit(grid, row, column + 1, width, height);
        }

        // Bottom
        if (row + 1 < height && grid[row + 1][column] == 1)
        {
            max += DfsVisit(grid, row + 1, column, width, height);
        }

        return max;
    }
}
```

```JavaScript
/**
 * @param {number[][]} grid
 * @return {number}
 */
var maxAreaOfIsland = function(grid) {
	if (grid.length <= 0 || grid[0].length <= 0) return 0;

    const height = grid.length;
    const width = grid[0].length;
    let maxArea = 0;
    for (let i = 0; i < height; i++) {
    	for (let j = 0; j < width; j++) {
    		maxArea = Math.max(maxArea, dfsVisit(grid, i, j, height, width));
    	}
    }

    return maxArea;
};

var dfsVisit = function(grid, row, column, height, width) {
	if (grid[row][column] != 1) return 0;

	grid[row][column] = 0;

	let max = 1;

	// Top
	if (row - 1 >= 0 && grid[row - 1][column] == 1) {
		max += dfsVisit(grid, row - 1, column, height, width);
	}

	// Left
	if (column - 1 >= 0 && grid[row][column - 1] == 1) {
		max += dfsVisit(grid, row, column - 1, height, width);
	}

	// Right
	if (column + 1 < width && grid[row][column + 1] == 1) {
		max += dfsVisit(grid, row, column + 1, height, width);
	}

	// Bottom
	if (row + 1 < height && grid[row + 1][column] == 1) {
		max +=dfsVisit(grid, row + 1, column, height, width);
	}

	return max;
};
```